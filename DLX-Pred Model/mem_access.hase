
// Project:	DLX V4
// Entity	Memory Access Unit
// File		mem_access.hase
// Date:	29 Oct 2002

// V4 has a dual pipeline and incorporates predication
// Of the 8 predicate registers, P0=0 and P1=1 always

// The Memory Access Unit receives all instructions that have completed
// execution.  Arithmetic instruction packets contain the data to be sent
// to the registers via the Write Back Unit in the data1 field.

// Load instruction packets contain a memory address in the data1 field
// which is sent to the Memory Unit. The data returned from the Memory
// is passed to the Write Back Unit.

// Store instruction packets contain a memory address in the data1 field
// and the data to be sent to Memory in the data2 field.

// In versions prior to V2.0 the model assumes that the memory will reply
// to a request sent in Clockphase 0 within the same clock. In V1.4 the
// request is sent in Clockphase 1 and returned in either the following
// or a subsequent Clockphase 1, depending on the memory latency parameter
// set in the memory entity. MA enters Held mode until the memory reply
// has been processed. Whilst held, no more packets will be received from
// the Execution units.

// Branch instruction packets contain the new PC address or the offset
// in the instruction field of the packet. Conditions are evaluated in
// the relevant execution unit and carried through as bits in the Status
// field of the packet. Floating-point compares set the FP bit; fl-pt
// branches (BFPT, BFPF) use the FP as their condition.
// If a control transfer occurs an untraced packet is sent to the
// Instruction Fetch Unit to update the Prefetch Program Counter
// and ClearPipe is invoked in ID and IF

$class_decls

//entities

  sim_entity_id pipe;
  sim_entity_id decision_box;
  sim_entity_id memory;

  instr_fetch * myIF;
  instr_decode * myID;
  Int_exe * myIE_A;
  Int_exe * myIE_B;

//structures and variables

  t_instrn_reg Instruction0;
  t_instrn_reg Instruction1;
  unit_data_struct IntOutput0, IntOutput1, FltOutput, MulOutput, DivOutput;
  unit_data_struct MA_Input_Reg0, MA_Input_Reg1;
  t_write_back_struct MA_Output0, MA_Output1;
		// t_write_back_struct = status | inst | data
  t_d_mem_access MemRequestA, MemRequestB;
				// MemRequest.status bits
				// 0 = read/write
				// 1 = 0 always for data
				// 2 = write to byte 3
				// 3 = write to byte 2
				// 4 = write to byte 1
				// 5 = write to byte 0
  t_exe_rslt MemOutput0, MemOutput1;
  t_branch_rslt BranchResult;
  t_pred_reg update;

  bool Interrupt, time_out;
  bool cond;
  bool MAHeld_A, MAHeld_B;
  bool MAHeld1;
  bool Update_PPC;
  bool IncPC_A;		// increment PC for LOAD/STORE order after memory
  bool IncPC_B;		// reply/replies have been processed (must increment 
			// PC even if order is suppresed by predicate)
  int operand;
  int hword0_mask;
  int hword1_mask;
  int byte3_mask;
  int byte_sign1;

  int offset;
  int Byte_addressA, Byte_addressB;
  int old_PC;		  // PC is defined in dlx.edl
  int PCinc;
  int Forward_A;	// set for instructions which send a result to
  int Forward_B;	// Write Back Unit, one for each data path

int MemReqOutstandingA, MemReqOutstandingB;
int MemoryReadAccessA, MemoryReadAccessB;
int MemoryWriteAccessA, MemoryWriteAccessB;
int old_state;

int Pred_A;	// value of predicate for instruction A
int Pred_B;     // value of predicate for instruction B

char DestinationA [8];  // Destinations for resetting of busy bits
char DestinationB [8];

reset_busy_bit_struct reset_busy_bit_pkt;
  char *reg31_label; // use to save the label when JAL

$pre

pipe = sim.get_entity_id("PIPE_DISP");

myIF = (instr_fetch*)sim.get_entity(sim.get_entity_id("INSTR_FETCH"));
myID = (instr_decode*)sim.get_entity(sim.get_entity_id("INSTR_DECODE"));
myIE_A = (Int_exe*)sim.get_entity(sim.get_entity_id("INT_EXE_A"));
myIE_B = (Int_exe*)sim.get_entity(sim.get_entity_id("INT_EXE_B"));

 MAHeld_A = false;
 MAHeld_B = false;
 MAHeld1 = false;
 IncPC_A = false;
 IncPC_B = false;

//half word and byte masks
   hword0_mask = -1 ^ 65535;	// 11111111 11111111 00000000 00000000
   hword1_mask = 65535;		// 00000000 00000000 11111111 11111111
   byte3_mask = 255;		// 00000000 00000000 00000000 11111111
   byte_sign1 = -1 ^ 255;	// 11111111 11111111 11111111 00000000

  Interrupt = false;
  time_out = false;
  Forward_A = 0;	// set for instructions which send a result to
  Forward_B = 0;	// the Write Back Unit
  Update_PPC = false;

 MemReqOutstandingA = 0;
 MemoryReadAccessA = 0;
 MemoryWriteAccessA = 0;
 MemReqOutstandingB = 0;
 MemoryReadAccessB = 0;
 MemoryWriteAccessB = 0;

MA_Input_Reg0.instrn.reset();
MA_Input_Reg0.status = 0;
MA_Input_Reg1.instrn.reset();
MA_Input_Reg1.status = 0;
MA_Output0.instrn.reset();
MA_Output0.status = 0;
MA_Output1.instrn.reset();
MA_Output1.status = 0;
//PC = 0;
old_PC = 0;
//FP = 0;

 myIF->InitialisePC(PC);	// initialises PPC to PC in IF

// update.pred_reg_value = 0;	// initialise predicate registers 0 & 1
// pred_reg.Update(0, update);	// to 0 and 1 respectively
// update.pred_reg_value = 1;
// pred_reg.Update(1, update);

 my_state = MA_VOID;
 old_state = MA_VOID;
 dump_state();

$phase0

// predicate for use in sim_waiting test

  sim_from_port mem_packet_0(from_memory_0);	    
  sim_from_port mem_packet_1(from_memory_1);	    
  sim_from_port from_int_0(from_int_exeA);
  sim_from_port from_int_1(from_int_exeB);

 Pred_A = 0;    // initialise predicates to false
 Pred_B = 0;

 DestinationA[0] = 'N';   // initialise destination register to "N" to indicate
 DestinationB[0] = 'N';   // no register whose busy bit needs updated found

// INPUT SECTION
// Unless MA is held up waiting for a reply from Memory,
// check for valid packets from execution units.
// Copy valid packets to MA_Input_Reg0 and MA_Input_Reg1.

  if (!MAHeld_A && !MAHeld_B)
  {
 	MA_Input_Reg0.status = 0;
	MA_Input_Reg1.status = 0;	// Initialise MA_Input_Regs to 0

	if (sim_waiting(ev, from_int_0) > 0)
	 {
	  SIM_CAST( unit_data_struct, IntOutput0, ev );
	   if ((IntOutput0.status & 1) == 1)
		{
		 MA_Input_Reg0.status = IntOutput0.status;
		 MA_Input_Reg0.instrn = IntOutput0.instrn;
		 MA_Input_Reg0.data1  = IntOutput0.data1;
		 MA_Input_Reg0.data2  = IntOutput0.data2;
		}

	}

	if (sim_waiting(ev, from_int_1) > 0)
	 {
	  SIM_CAST( unit_data_struct, IntOutput1, ev );
	   if ((IntOutput1.status & 1) == 1)
		{
		 MA_Input_Reg1.status = IntOutput1.status;
		 MA_Input_Reg1.instrn = IntOutput1.instrn;
		 MA_Input_Reg1.data1  = IntOutput1.data1;
		 MA_Input_Reg1.data2  = IntOutput1.data2;
		}
	 }

// If instruction A is valid, find the value of its predicate

	if ((MA_Input_Reg0.status & 1) == 1 )
	{
		if (MA_Input_Reg0.instrn.decode_LOAD())
		{
		Pred_A = pred_reg.vec[MA_Input_Reg0.instrn.load_field.src_pred].pred_reg_value;
		strcpy(DestinationA, MA_Input_Reg0.instrn.load_field.dest_reg);
		}
		
		if (MA_Input_Reg0.instrn.decode_STORE())
		{
		Pred_A = pred_reg.vec[MA_Input_Reg0.instrn.store_field.src_pred].pred_reg_value;
		}

		if (MA_Input_Reg0.instrn.decode_MOVE())
		{
		Pred_A = pred_reg.vec[MA_Input_Reg0.instrn.move_field.src_pred].pred_reg_value;
		strcpy(DestinationA, MA_Input_Reg0.instrn.move_field.dest_reg);
		}

		if (MA_Input_Reg0.instrn.decode_ALU())
		{
		strcpy(DestinationA, MA_Input_Reg0.instrn.alu_field.dest_reg);
		Pred_A = pred_reg.vec[MA_Input_Reg0.instrn.alu_field.src_pred].pred_reg_value;
		}

		if (MA_Input_Reg0.instrn.decode_ALUI())
		{
		strcpy(DestinationA, MA_Input_Reg0.instrn.alui_field.dest_reg);
		Pred_A = pred_reg.vec[MA_Input_Reg0.instrn.alui_field.src_pred].pred_reg_value;
		}

		if (MA_Input_Reg0.instrn.decode_BRNC())
		{
		Pred_A = pred_reg.vec[MA_Input_Reg0.instrn.brnc_field.src_pred].pred_reg_value;
		}

		if (MA_Input_Reg0.instrn.decode_JIMM())
		{
		Pred_A = pred_reg.vec[MA_Input_Reg0.instrn.jimm_field.src_pred].pred_reg_value;
		}

		if (MA_Input_Reg0.instrn.decode_JREG())
		{
		Pred_A = pred_reg.vec[MA_Input_Reg0.instrn.jimm_field.src_pred].pred_reg_value;
		}

//    Also for the predicate register compare class
		if (MA_Input_Reg0.instrn.decode_ALUP())
		{
		Pred_A = pred_reg.vec[MA_Input_Reg0.instrn.alup_field.src_pred].pred_reg_value;
		}
	}

// If instruction B is valid, find the value of its predicate

	if ((MA_Input_Reg1.status & 1) == 1 )
	{
		if (MA_Input_Reg1.instrn.decode_LOAD())
		{
		Pred_B = pred_reg.vec[MA_Input_Reg1.instrn.load_field.src_pred].pred_reg_value;
		strcpy(DestinationB, MA_Input_Reg1.instrn.load_field.dest_reg);
		}
		
		if (MA_Input_Reg1.instrn.decode_STORE())
		{
		Pred_B = pred_reg.vec[MA_Input_Reg1.instrn.store_field.src_pred].pred_reg_value;
		}

		if (MA_Input_Reg1.instrn.decode_MOVE())
		{
		Pred_B = pred_reg.vec[MA_Input_Reg1.instrn.move_field.src_pred].pred_reg_value;
		strcpy(DestinationB, MA_Input_Reg1.instrn.move_field.dest_reg);
		}

		if (MA_Input_Reg1.instrn.decode_ALU())
		{
		strcpy(DestinationB, MA_Input_Reg1.instrn.alu_field.dest_reg);
		Pred_B = pred_reg.vec[MA_Input_Reg1.instrn.alu_field.src_pred].pred_reg_value;
		}

		if (MA_Input_Reg1.instrn.decode_ALUI())
		{
		strcpy(DestinationB, MA_Input_Reg1.instrn.alui_field.dest_reg);
		Pred_B = pred_reg.vec[MA_Input_Reg1.instrn.alui_field.src_pred].pred_reg_value;
		}

		if (MA_Input_Reg1.instrn.decode_BRNC())
		{
		Pred_B = pred_reg.vec[MA_Input_Reg1.instrn.brnc_field.src_pred].pred_reg_value;
		}

		if (MA_Input_Reg1.instrn.decode_JIMM())
		{
		Pred_B = pred_reg.vec[MA_Input_Reg1.instrn.jimm_field.src_pred].pred_reg_value;
		}

		if (MA_Input_Reg1.instrn.decode_JREG())
		{
		Pred_B = pred_reg.vec[MA_Input_Reg1.instrn.jimm_field.src_pred].pred_reg_value;
		}

//    Also for the predicate register compare class
		if (MA_Input_Reg1.instrn.decode_ALUP())
		{
		Pred_B = pred_reg.vec[MA_Input_Reg1.instrn.alup_field.src_pred].pred_reg_value;
		}
	}


  }	// close if MAHeld == 0 

// always send packets to Pipeline Display even when held, otherwise Display
// doesn't work; send the predicate bit to the Display as bit 30 of the
// status register.

	if (!MAHeld_A && !MAHeld_B) {
		Instruction0.status = MA_Input_Reg0.status & 1;
		Instruction0.status = Instruction0.status | (Pred_A << 1);
		Instruction0.instrn = MA_Input_Reg0.instrn;
	  }
		sim_schedule(pipe, 0.0, INSTRUCTION,
			SIM_PUT(t_instrn_reg, Instruction0));

	if (!MAHeld_A && !MAHeld_B) {
		Instruction1.status = MA_Input_Reg1.status & 1;
		Instruction1.status = Instruction1.status | (Pred_B << 1);
		Instruction1.instrn = MA_Input_Reg1.instrn;
	 }
		sim_schedule(pipe, 0.0, INSTRUCTION,
			SIM_PUT(t_instrn_reg, Instruction1));


// In DLX with Predication, states can be 
// (Input status A = I_S A, Input status B = I_S B)

// I_S A = 0, I_S B = 0     		- do nothing
// I_S A = 1, I_S B = 0 and !MAHeld     - process instruction A
// I_S A = 0, I_S B = 1 and !MAHeld     - process instruction B
// I_S A = 1, I_S B = 1 and !MAHeld     - process both instructions
// I_S A = 1, I_S B = 0 and  MAHeld or
// I_S A = 0, I_S B = 1 and  MAHeld or
// I_S A = 1, I_S B = 1 and  MAHeld     - look for memory reply   
//				         - no reply: do nothing
//                                       - reply: process held instructions
// where MAHeld = MAHeld_A | MAHeld_B

  if (((MA_Input_Reg0.status & 1) == 0) && (MA_Input_Reg1.status & 1) == 0)
	{
	 my_state = MA_VOID;
	}

  // check that at least one instruction is valid and MA is not held
  else if ( (((MA_Input_Reg0.status & 1) == 1)
	  || ((MA_Input_Reg1.status & 1) == 1))
	  && !MAHeld_A && !MAHeld_B )

   // INPUT INSTRUCTION PROCESSING
   // Arithmetic instructions:	forward to Write Back Unit
   // Load instructions:	send Read access to Memory, set waiting flag
   // Store instructions:	send Write access to Memory, set waiting flag
   // Branch operations:	execute

	{

	if ((Pred_A == 1) && (Pred_B == 1)) {
		// Both instructions should complete
			}
	else if ((Pred_A == 0) && (Pred_B == 1)) {
		// Only Instruction A should execute
		// Reset any busy bits for registers waiting for instr A
		if (((MA_Input_Reg0.status & 1) == 1)
			 && (DestinationA[0] != 'N'))
		{ 
		reset_busy_bit_pkt.dest = Decode_Register(DestinationA).number;
		reset_busy_bit_pkt.instrn = 1;   // indicate instrn A
		sim_schedule(to_registers, 0.0, RESET_BUSY_BIT, 
			SIM_PUT(reset_busy_bit_struct, reset_busy_bit_pkt));
		}
			}
	else if ((Pred_A == 1) && (Pred_B == 0)) {
		// Instruction B should execute
		// Reset any busy bits for registers waiting for instr B
		if (((MA_Input_Reg1.status & 1) == 1)
			 && (DestinationB[0] != 'N')) 
		{ 
		reset_busy_bit_pkt.dest = Decode_Register(DestinationB).number;
		reset_busy_bit_pkt.instrn = 2; // indicate instrn B
		sim_schedule(to_registers, 0.0, RESET_BUSY_BIT,
			SIM_PUT(reset_busy_bit_struct, reset_busy_bit_pkt));
		}
			}
	else if ((Pred_A == 0) && (Pred_B == 0)) {
		// Usually means one instruction is invalid, other 
		// has predicate not set 
		// Reset any busy bits for registers waiting for instr A
		if (((MA_Input_Reg0.status & 1) == 1)
			 && (DestinationA[0] != 'N'))
		{ 
		reset_busy_bit_pkt.dest = Decode_Register(DestinationA).number;
		reset_busy_bit_pkt.instrn = 1;
		sim_schedule(to_registers, 0.0, RESET_BUSY_BIT, 
			SIM_PUT(reset_busy_bit_struct, reset_busy_bit_pkt));
		}		

		// Reset any busy bits for registers waiting for instr B
		if (((MA_Input_Reg1.status & 1) == 1)
			 && (DestinationB[0] != 'N'))
		{ 
		reset_busy_bit_pkt.dest = Decode_Register(DestinationB).number;
		reset_busy_bit_pkt.instrn = 2;
		sim_schedule(to_registers, 0.0, RESET_BUSY_BIT, 
			SIM_PUT(reset_busy_bit_struct, reset_busy_bit_pkt));
		}

		my_state = MA_VOID;
	   		}

   my_state = MA_BUSY;
   PCinc = MA_Input_Reg0.status & 4;	// select bit 29
   PCinc = (PCinc ^ 4);		// invert bit 29
					// if status bit 29 = 0, PCinc = 4
					// if status bit 29 = 1, PCinc = 0

// EXECUTE A INSTRUCTION

   if (MA_Input_Reg0.instrn.function == t_dlx_instrn_set::NOP)
    {
	Forward_A = 0;
	PC.offset = PC.offset + PCinc;
    }			// end of NOP code

// Start of predicate register setting code

   else if (MA_Input_Reg0.instrn.decode_ALUP())
    {
	Forward_A = 0;
	int dest_pred_reg1 = MA_Input_Reg0.instrn.alup_field.dest_pred_reg1;
	int dest_pred_reg2 = MA_Input_Reg0.instrn.alup_field.dest_pred_reg2;
	if (MA_Input_Reg0.data1 == 1)
		// compare true so set dest_pred_reg1 = 1 and reg2 = 0
	  {
	  // Make sure value 1 isn't written to predicate registers 0 or 1
	  if (dest_pred_reg1 > 1)
	    {   
	     update.pred_reg_value = 1;
	     pred_reg.Update(dest_pred_reg1, update);
	     }
	  update.pred_reg_value = 0;
	  pred_reg.Update(dest_pred_reg2, update);
	  }
	 else // compare false so set dest_pred_reg2 = 1 and reg1 = 0
	   {
	    update.pred_reg_value = 0;
	  pred_reg.Update(dest_pred_reg1, update);
	  // Make sure value 1 isn't written to predicate register 0 or 1
	   if (dest_pred_reg2 > 1)
	     {   
	      update.pred_reg_value = 1;
	      pred_reg.Update(dest_pred_reg2, update);
	     }
	   }
	    PC.offset = PC.offset + PCinc;
    }		// end of ALUP code

// start of control transfer code

      else if (MA_Input_Reg0.instrn.decode_BRNC() || MA_Input_Reg0.instrn.decode_BFP()) 
	{
	// Branches can only occur in Channel A and must point to a
	// Channel A instruction. "Delay slot" instruction in Channel B
	// must not increment PC.

	   Forward_A = 0;

	   cond = false;
	// Branch if Equal (status bit 23 = 0)
	   if (MA_Input_Reg0.instrn.function == t_dlx_instrn_set::BEQZ) 
	        cond = ((MA_Input_Reg0.status & 256) == 0);
	// Branch if Not Equal (status bit 23 = 0 if zero)
	   else if (MA_Input_Reg0.instrn.function == t_dlx_instrn_set::BNEZ) 
		cond = ((MA_Input_Reg0.status & 256) != 0);
	   if (cond) {
		PC.offset = 0;
		if (MA_Input_Reg0.instrn.decode_BRNC())
		  strcpy(PC.label, MA_Input_Reg0.instrn.brnc_field.label);
		else
		  strcpy(PC.label, MA_Input_Reg0.instrn.label);
		BranchResult.addr = PC;
	 	Update_PPC = true;
	   } else {PC.offset += 2*PCinc;} // increment Program Counter
					// for branch and delay slot
	  PCinc = 0;
	  }

      else if (MA_Input_Reg0.instrn.decode_JIMM())
	{
	 if (MA_Input_Reg0.instrn.function == t_dlx_instrn_set::TRAP)
	  {
	   Forward_A = 0;
	   PC.offset +=  PCinc;
	   Interrupt = true;
	  }
         else if (MA_Input_Reg0.instrn.function == t_dlx_instrn_set::J)
	  {
	   Forward_A = 0;
	   PC.offset = 0;
	   strcpy(PC.label, MA_Input_Reg0.instrn.label);

	   BranchResult.addr = PC;
	   Update_PPC = true;
	   PCinc = 0;
	  }
	 else				// JAL
// JAL needs to be re-worked.
	  {
	   if ((MA_Input_Reg0.status & 4) == 4)	// first half of double-cycle
	    {
	     Forward_A = 1;
	     MA_Output0.instrn = MA_Input_Reg0.instrn;
	     MA_Output0.data = PC.offset + 8;
	     strcpy(reg31_label, PC.label);
	    }
	   else					// second half (as for J)
	    {
	     Forward_A = 0;
	     PC.offset = 0;
	     strcpy(PC.label,MA_Input_Reg0.instrn.label);
	     BranchResult.addr = PC;
	     Update_PPC = true;

	    }
	  }				// end of JAL code
	}				// end of JIMM code

      else if (MA_Input_Reg0.instrn.decode_JREG())
	{
	 Forward_A = 0;
					// assumes it's JR or JALR
	 PC.offset = MA_Input_Reg0.data1;
	 strcpy(PC.label, reg31_label);
	 BranchResult.addr = PC;
	 Update_PPC = true;
	 PCinc = 0;
	}				// end of JREG code

// end of control transfer code

      else if (MA_Input_Reg0.instrn.decode_LOAD())
	{
	 if (Pred_A == 1)
	  {
	   Forward_A = 0;	// Forward_A set to 1 when data is returned
	   MemRequestA.status = 0;
	   MemRequestA.data = 0;
	   Byte_addressA = MA_Input_Reg0.data1 & 3;
	   MemRequestA.address = MA_Input_Reg0.data1 >> 2;
	   MemoryReadAccessA = 1;			// set Read Flag
	   MAHeld_A = true;	// stalls pipeline whilst waiting for memory
	 }
	   IncPC_A = true;	// increment PC for this order
	}

      else if (MA_Input_Reg0.instrn.decode_STORE())
	{
	 if (Pred_A == 1)
	  {
	   Forward_A = 0;
	   MemRequestA.status = 1;
	   Byte_addressA = MA_Input_Reg0.data1 & 3;
	   MemRequestA.address = MA_Input_Reg0.data1 >> 2;
	   operand = MA_Input_Reg0.data2;

	if (MA_Input_Reg0.instrn.function == t_dlx_instrn_set::SB)
		{
		 operand = operand & byte3_mask;
		 if      ((Byte_addressA & 3) == 0)	// write to byte 0
			{operand = (operand << 24);
			 MemRequestA.status = MemRequestA.status | 32;}
		 else if ((Byte_addressA & 3) == 1)	// write to byte 1
			{operand = (operand << 16);
			 MemRequestA.status = MemRequestA.status | 16;}
		 else if ((Byte_addressA & 3) == 2)	// write to byte 2
			{operand = (operand <<  8);
			 MemRequestA.status = MemRequestA.status | 8;}
		 else					// write to byte 3
			 {MemRequestA.status = MemRequestA.status | 4;}
		}

	else if (MA_Input_Reg0.instrn.function == t_dlx_instrn_set::SH)
		{
		 operand = operand & hword1_mask;
		 if      ((Byte_addressA & 2) == 0)	// write to bytes 0 & 1
			{operand = (operand << 16);
			 MemRequestA.status = MemRequestA.status | 48;}
		 else					// write to bytes 2 & 3
			 {MemRequestA.status = MemRequestA.status | 12;}
		}
	else		 		// SW or SF, write to all 4 bytes
		{MemRequestA.status = MemRequestA.status | 60;}

	  MemRequestA.data = operand;
	  MemoryWriteAccessA = 1;		// set Write Flag
	  MAHeld_A = true;	// stalls pipeline whilst waiting for memory
	 }	// end of Pred_A = 1
	   IncPC_A = true;	// increment PC for this order
	}	// end of store order code

     else	// for all other instructions,
		// copy result from MA_Input register to MA_Output0
	{
	 Forward_A = Pred_A;  // forward result only if Pred = 1
	 MA_Output0.instrn = MA_Input_Reg0.instrn;
	 MA_Output0.data = MA_Input_Reg0.data1;
		PC.offset = PC.offset + PCinc;	// increment Program Counter
	}

// If a control transfer occurs (unconditional jump, or conditional branch
// for which the condition is satisfied, with no branch predicted), the
// instructions in Instruction Fetch (IF), Instruction Decode (ID) and
// Integer Execution Units (IE) must be invalidated. 

// IF, ID and IE set the status of their outgoing instructions to 0 in
// ClockPhase 1. ID invokes clearHaz in the Scoreboard to clear any hazards.

	if ((Update_PPC) || (Interrupt))
	 {
	  myIF->ClearPipe();
	  myID->ClearPipe();
	  myIE_A->ClearPipe();
	  myIE_B->ClearPipe();
	 }

// END OF EXECUTE A INSTRUCTION
 
// EXECUTE B INSTRUCTION

   if (MA_Input_Reg1.instrn.function == t_dlx_instrn_set::NOP)
    {
	Forward_B = 0;
	PC.offset = PC.offset + PCinc;
    }			// end of NOP code

// Start of predicate register setting code

   else if (MA_Input_Reg1.instrn.decode_ALUP())
    {
	Forward_B = 0;

	int dest_pred_reg1 = MA_Input_Reg1.instrn.alup_field.dest_pred_reg1;
	int dest_pred_reg2 = MA_Input_Reg1.instrn.alup_field.dest_pred_reg2;
	if (MA_Input_Reg1.data1 == 1)
		// compare true so set dest_pred_reg1 = 1 and reg2 = 0
	  {
	  // Make sure value 1 isn't written to predicate register 0 or 1
	  if (dest_pred_reg1 > 1)
	    {   
	     update.pred_reg_value = 1;
	     pred_reg.Update(dest_pred_reg1, update);
	     }
	  update.pred_reg_value = 0;
	  pred_reg.Update(dest_pred_reg2, update);
	  }
	 else // compare false so set dest_pred_reg2 = 1 and reg1 = 0
	   {
	    update.pred_reg_value = 0;
	  pred_reg.Update(dest_pred_reg1, update);
	  // Make sure value 1 isn't written to predicate register 0 or 1
	   if (dest_pred_reg2 > 1)
	     {   
	      update.pred_reg_value = 1;
	      pred_reg.Update(dest_pred_reg2, update);
	     }
	   }
	   PC.offset = PC.offset + PCinc;
    }		// end of ALUP code

// start of control transfer code

// no control transfers in channel B
// end of control transfer code

      else if (MA_Input_Reg1.instrn.decode_LOAD())
	{
	 if (Pred_B == 1)
	  {
	 Forward_B = 0;		// Forward_B set to 1 when data is returned
	   MemRequestB.status = 0;
	   MemRequestB.data = 0;
	   Byte_addressB = MA_Input_Reg1.data1 & 3;
	   MemRequestB.address = MA_Input_Reg1.data1 >> 2;
	   MemoryReadAccessB = 1;		// set Read Flag
	   MAHeld_B = true;	// stalls pipeline whilst waiting for memory
	  }
	   IncPC_B = true;	// increment PC for this order
	}	// end of LOAD order

      else if (MA_Input_Reg1.instrn.decode_STORE())
	{
	 if (Pred_B == 1)
	  {
	   Forward_B = 0;
	   MemRequestB.status = 1;
	   Byte_addressB = MA_Input_Reg1.data1 & 3;
	   MemRequestB.address = MA_Input_Reg1.data1 >> 2;
	   operand = MA_Input_Reg1.data2;

	   if (MA_Input_Reg1.instrn.function == t_dlx_instrn_set::SB)
		{
		 operand = operand & byte3_mask;
		 if      ((Byte_addressB & 3) == 0)	// write to byte 0
			{operand = (operand << 24);
			 MemRequestB.status = MemRequestB.status | 32;}
		 else if ((Byte_addressB & 3) == 1)	// write to byte 1
			{operand = (operand << 16);
			 MemRequestB.status = MemRequestB.status | 16;}
		 else if ((Byte_addressB & 3) == 2)	// write to byte 2
			{operand = (operand <<  8);
			 MemRequestB.status = MemRequestB.status | 8;}
		 else					// write to byte 3
			 {MemRequestB.status = MemRequestB.status | 4;}
		}

	else if (MA_Input_Reg1.instrn.function == t_dlx_instrn_set::SH)
		{
		 operand = operand & hword1_mask;
		 if      ((Byte_addressB & 2) == 0)	// write to bytes 0 & 1
			{operand = (operand << 16);
			 MemRequestB.status = MemRequestB.status | 48;}
		 else					// write to bytes 2 & 3
			 {MemRequestB.status = MemRequestB.status | 12;}
		}
	else		 		// SW or SF, write to all 4 bytes
		{MemRequestB.status = MemRequestB.status | 60;}

	  MemRequestB.data = operand;
	  MemoryWriteAccessB = 1;		// set Write Flag
	  MAHeld_B = true;	// stalls pipeline whilst waiting for memory
	 }	// end of if Pred_B = 1
	   IncPC_B = true;	// increment PC for this order
	}	// end of store order code

     else	// for all other instructions,
		// copy result from MA_Input register to MA_Output1
	{
	 Forward_B = Pred_B;  // forward result only if Pred = 1
	 MA_Output1.instrn = MA_Input_Reg1.instrn;
	 MA_Output1.data = MA_Input_Reg1.data1;
		PC.offset = PC.offset + PCinc;	// increment Program Counter
	}
    }	// closes Input Registers valid = 1 and Holds = 0

// END OF EXECUTE B INSTRUCTION
 

  // PROCESS REPLY FROM MEMORY
   // If MAHeld (A or B) = 1, look for packet from memory
   // for STORE orders, this is an acknowledge
   // for LOAD orders, the packet contains data which must be processed

  else if ( (((MA_Input_Reg0.status & 1) == 1) && MAHeld_A)
	 || (((MA_Input_Reg1.status & 1) == 1) && MAHeld_B) )
	{				// valid instruction(s) held up
					// waiting for reply from memory
	if ( ((sim_waiting(mem_packet_0) == 0) && MAHeld_A)
	  || ((sim_waiting(mem_packet_1) == 0) && MAHeld_B) )

	 {my_state = MA_HELD;}

	else 		// look for packets from memory
	{
	  if (sim_waiting(mem_packet_0) > 0)
	  {
	   my_state = MA_BUSY;
	   MemReqOutstandingA = 0;
	   sim_select(mem_packet_0, ev);
		if (MemoryWriteAccessA == 1)
		{
		  SIM_CAST(t_exe_rslt, MemOutput0, ev);
		  MAHeld_A = false;
		  MemoryWriteAccessA = 0;	// reset Write Flag
		}
		else if (MemoryReadAccessA == 1)
		{
		  SIM_CAST(t_exe_rslt, MemOutput0, ev);
		  operand = MemOutput0.data;
		  MA_Output0.instrn = MA_Input_Reg0.instrn;
		  Forward_A = 1;			// set Forward_A flag
		  MAHeld_A = false;
		  MemoryReadAccessA = 0;		// reset Read Flag

	// Select operand from within store word

	if (MA_Input_Reg0.instrn.function == t_dlx_instrn_set::LB)
		{
		 if      ((Byte_addressA & 3) == 0)	// byte 0
			{operand = (operand >> 24);}
		 else if ((Byte_addressA & 3) == 1)	// byte 1
			{operand = (operand >> 16);}
		 else if ((Byte_addressA & 3) == 2)	// byte 2
			{operand = (operand >>  8);}
		 operand = operand & byte3_mask;

		  if ((operand & 128) == 0)	// test sign
			{operand = operand & byte3_mask;}	// 0s
		  else	{operand = operand | byte_sign1;}	// 1s
		}

	else if (MA_Input_Reg0.instrn.function == t_dlx_instrn_set::LBU)
		{
		 if      ((Byte_addressA & 3) == 0)	// byte 0
			{operand = (operand >> 24);}
		 else if ((Byte_addressA & 3) == 1)	// byte 1
			{operand = (operand >> 16);}
		 else if ((Byte_addressA & 3) == 2)	// byte 2
			{operand = (operand >>  8);}
		 operand = operand & byte3_mask;
		}

	else if (MA_Input_Reg0.instrn.function == t_dlx_instrn_set::LH)
		{
		 if ((Byte_addressA & 2) == 0)	// half word 0
			{operand = (operand >> 16);}
		 else {operand = operand & hword1_mask;}

		  if ((operand & 32768) == 0)	// test sign
			{operand = operand & hword1_mask;}	// 0s
		  else	{operand = operand | hword0_mask;}	// 1s
		}

	else if (MA_Input_Reg0.instrn.function == t_dlx_instrn_set::LHU)
		{if ((Byte_addressA & 2) == 0)		// half word 0
			{operand = (operand >> 16);}
		 operand = operand & hword1_mask;
		}

	// includes MA_Input_Reg0.instrn.function == LW
		MA_Output0.data = operand;
	  }	// closes MemoryReadAccessA = 1

	 }	// closes sim_waiting for 0 > 0

	  if (sim_waiting(mem_packet_1) > 0)	// Data Path B
	  {
	   my_state = MA_BUSY;
	   MemReqOutstandingB = 0;
	   sim_select(mem_packet_1, ev);
		if (MemoryWriteAccessB == 1)
		{
		  SIM_CAST(t_exe_rslt, MemOutput1, ev);
		  MAHeld_B = false;
		  MemoryWriteAccessB = 0;	// reset Write Flag
		}
		else if (MemoryReadAccessB == 1)
		{
		  SIM_CAST(t_exe_rslt, MemOutput1, ev);
		  operand = MemOutput1.data;
		  MA_Output1.instrn = MA_Input_Reg1.instrn;
		  Forward_B = 1;			// set Forward_B flag
		  MAHeld_B = false;
		  MemoryReadAccessB = 0;		// reset Read Flag

	// Select operand from within store word

	if (MA_Input_Reg1.instrn.function == t_dlx_instrn_set::LB)
		{
		 if      ((Byte_addressB & 3) == 0)	// byte 0
			{operand = (operand >> 24);}
		 else if ((Byte_addressB & 3) == 1)	// byte 1
			{operand = (operand >> 16);}
		 else if ((Byte_addressB & 3) == 2)	// byte 2
			{operand = (operand >>  8);}
		 operand = operand & byte3_mask;

		  if ((operand & 128) == 0)	// test sign
			{operand = operand & byte3_mask;}	// 0s
		  else	{operand = operand | byte_sign1;}	// 1s
		}

	else if (MA_Input_Reg1.instrn.function == t_dlx_instrn_set::LBU)
		{
		 if      ((Byte_addressB & 3) == 0)	// byte 0
			{operand = (operand >> 24);}
		 else if ((Byte_addressB & 3) == 1)	// byte 1
			{operand = (operand >> 16);}
		 else if ((Byte_addressB & 3) == 2)	// byte 2
			{operand = (operand >>  8);}
		 operand = operand & byte3_mask;
		}

	else if (MA_Input_Reg1.instrn.function == t_dlx_instrn_set::LH)
		{
		 if ((Byte_addressB & 2) == 0)	// half word 0
			{operand = (operand >> 16);}
		 else {operand = operand & hword1_mask;}

		  if ((operand & 32768) == 0)	// test sign
			{operand = operand & hword1_mask;}	// 0s
		  else	{operand = operand | hword0_mask;}	// 1s
		}

	else if (MA_Input_Reg1.instrn.function == t_dlx_instrn_set::LHU)
		{if ((Byte_addressB & 2) == 0)		// half word 0
			{operand = (operand >> 16);}
		 operand = operand & hword1_mask;
		}

	// includes MA_Input_Reg1.instrn.function == LW
		MA_Output1.data = operand;
	  }	// closes MemoryReadAccessB = 1

	 }	// closes sim_waiting for 1 > 0
      }		// closes else  look for packets from memory
   }	// closes valid instruction(s) held up

// Increment PC for completed LOAD/STORE orders
    if (IncPC_A)
	{PC.offset = PC.offset + PCinc;
	 IncPC_A = false;}
    if (IncPC_B)
	{PC.offset = PC.offset + PCinc;
	 IncPC_B = false;}

//	if ((my_state != old_state) || (PC != old_PC))
//	 {dump_state();
//	  old_state = my_state;
//	  old_PC = PC;
//	 }
	dump_state();
	// end of ClockPhase = 0

$phase1

	MAHeld1 = MAHeld_A | MAHeld_B;
// interrupt if TRAP
	if (Interrupt)
	 {stopSimulation(0);}

// If MemoryReadAccessA = 1 or MemoryWriteAccessA = 1
// and MemReqOutstandingA = 0, access memory via port 0

	if (((MemoryReadAccessA == 1) || (MemoryWriteAccessA == 1))
           && (MemReqOutstandingA == 0))
	   {
	    send_MEM_ACCESS_D(to_memory_0, MemRequestA);
	    MemReqOutstandingA = 1;
	   }

// If Forward_A = 1, send Output 0 to Write Back Unit 

	  if (((MA_Input_Reg0.status & 1) == 1) && (Forward_A == 1))
	   {
	    MA_Output0.status = MA_Input_Reg0.status;
	    send_WRITE_BACK(to_write_back_0, MA_Output0);
	    Forward_A = 0;
	   }
	   sim_hold(1);

// If MemoryReadAccessB = 1 or MemoryWriteAccessB = 1
// and MemReqOutstandingB = 0, access memory via port 1

	if (((MemoryReadAccessB == 1) || (MemoryWriteAccessB == 1))
           && (MemReqOutstandingB == 0))
	   {
	    send_MEM_ACCESS_D(to_memory_1, MemRequestB);
	    MemReqOutstandingB = 1;
	   }

// If Forward_B = 1, send Output 1 to Write Back Unit 

	  if (((MA_Input_Reg1.status & 1) == 1) && (Forward_B == 1))
	   {
	    MA_Output1.status = MA_Input_Reg1.status;
	    send_WRITE_BACK(to_write_back_1, MA_Output1);
	    Forward_B = 0;
	   }

// If Update_PPC is set, send PC value(s) to Instruction Fetch Unit
// This code will be updated later when a Branch History Table is included

	  if (((MA_Input_Reg0.status & 1) == 1) && (Update_PPC))
	   {
	    BranchResult.branch = 0;
	    BranchResult.status = 0;
	    send_BRANCH_RESULT(to_instr_fetch, BranchResult);
	    Update_PPC = false;
	   }

//   if (sim_clock() > Max_Time_Steps)
//   {
//    time_out = true;
//     stopSimulation();
//   }
   Max_Time_Left = Max_Time_Left - 20;
    dump_globals();
    if (Max_Time_Left <= 0)
     {
       time_out = true;
       stopSimulation();
     }

	// end of  ClockPhase 1

$report

  if (Interrupt)
	{printf("Simulation ended normally by TRAP instruction\n");}

  if (time_out)
    { printf("Simulation terminated: Max_Time_steps exceeded \n");}






